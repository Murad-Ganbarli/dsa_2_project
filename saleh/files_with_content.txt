==================================================
File: C:/Users/murad/Programming/DSA_2/Project/saleh/main.c
==================================================
#include <stdio.h>
#include <stdlib.h>
#include "queue.h"
#include "scheduler.h"

int main() {
    Queue *running = queue_init();
    Queue *waiting = queue_init();


    // Define an array to hold the workload items
    workload_item items[] = {
        {0, -1, 0, 18, 0, "init", 10},
        {1, 0, 1, 16, 0, "bash", 1},
        {2, 0, 3, 16, 0, "bash", 1},
        {3, 1, 4, 6, 0, "find", 2},
        {4, 1, 7, 9, 0, "gcc", 5},
        {5, 4, 8, 9, 0, "ld", 4},
        {6, 2, 10, 13, 0, "ssh", 3},
        {7, 6, 11, 13, 0, "crypt", 5},
        {8, 2, 14, 16, 0, "snake", 4},
        {9, 1, 14, 15, 0, "cat", 5}
    };

    // Calculate the size of the array
    int numItems = sizeof(items) / sizeof(items[0]);

    // Push each item from the array into the waiting queue
    for (int i = 0; i < numItems; i++) {
        enqueue(waiting, items[i]);
    }

    // Display the queue before scheduling
    printf("Queue before scheduling:\n");
    display(waiting);

    // Apply scheduling
    for (int time = 0; time <= 20; time++) {
        schedule(running, waiting, time);
    }

    // Display the queue after scheduling
    printf("\nQueue after scheduling:\n");
    display(waiting);

    return 0;
}


==================================================
File: C:/Users/murad/Programming/DSA_2/Project/saleh/queue.c
==================================================
#include <stdio.h>
#include <stdlib.h>
#include "workload_item.h"

struct node {
    workload_item data;
    struct node* next;
};

typedef struct node Node;

typedef struct {
    Node* front;
    Node* rear;
} Queue;

Queue* queue_init() {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    if (queue == NULL) {
        printf("Memory allocation failed.\n");
        exit(EXIT_FAILURE);
    }
    queue->front = NULL;
    queue->rear = NULL;
    return queue;
}
void enqueue(Queue* queue, workload_item item) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = item;
    newNode->next = NULL;
    if (queue->front == NULL && queue->rear == NULL) {
        queue->front = queue->rear = newNode;
    } else {
        queue->rear->next = newNode;
        queue->rear = newNode;
    }
}

void dequeue(Queue* queue) {
    if (queue->front == NULL) {
        printf("Queue is empty\n");
        return;
    }
    Node* temp = queue->front;
    if (queue->front == queue->rear) {
        queue->front = queue->rear = NULL;
    } else {
        queue->front = queue->front->next;
    }
    free(temp);
}

void display(Queue* queue) {
    if (queue->front == NULL) {
        printf("Queue is empty\n");
        return;
    }
    Node* temp = queue->front;
    while (temp != NULL) {
        printf("PID: %d, PPID: %d, Start: %zu, Finish: %zu, Idle: %zu, Command: %s, Priority: %d\n",
            temp->data.pid, temp->data.ppid, temp->data.ts, temp->data.tf, temp->data.idle, temp->data.cmd, temp->data.prio);
        temp = temp->next;
    }
}

==================================================
File: C:/Users/murad/Programming/DSA_2/Project/saleh/queue.h
==================================================
#ifndef QUEUE_H
#define QUEUE_H

#include "workload_item.h"

struct node {
    workload_item data;
    struct node* next;
};

typedef struct node Node;

typedef struct {
    Node* front;
    Node* rear;
} Queue;

void enqueue(Queue* queue, workload_item item);
void dequeue(Queue* queue);
void display(Queue* queue);
Queue* queue_init();

#endif /* QUEUE_H */


==================================================
File: C:/Users/murad/Programming/DSA_2/Project/saleh/scheduler.c
==================================================
// scheduler.c

#include "scheduler.h"
#include <stdio.h>

// Function to perform a scheduling round
void schedule(Queue* running, Queue* waiting, int time) {
    int cpuCapability = 20; // Example CPU capability, you can change this value
    int currentTime = time;

    // Identify all possible processes
    Queue* possibleProcesses = identifyPossibleProcesses(waiting, currentTime);

    // Select current processes
    Queue* currentProcesses = selectCurrentProcesses(possibleProcesses, currentTime);

    // Calculate the sum of priorities of current processes
    int sumPriorities = calculateSumPriorities(currentProcesses);

    // Check if the sum of priorities exceeds CPU capability
    if (sumPriorities <= cpuCapability) {
        // Enqueue all current processes into the running queue
        enqueue(running, *currentProcesses);
    } else {
        // Enqueue only processes with greater priority into the running queue
        // and the rest into the waiting queue
        separateProcesses(running, waiting, currentProcesses, cpuCapability);
    }

    // Increment idle time and delay termination time for de-scheduled processes
    updateProcesses(waiting, currentTime);
}

// Function to identify all possible processes (tf > t)
Queue* identifyPossibleProcesses(Queue* waiting, int currentTime) {
    Queue* possibleProcesses = queue_init();
    Node* current = waiting->front;
    while (current != NULL) {
        if (current->data.tf > currentTime) {
            enqueue(possibleProcesses, current->data);
        }
        current = current->next;
    }
    return possibleProcesses;
}

// Function to select current processes (ts â‰¤ t â‰¤ tf)
Queue* selectCurrentProcesses(Queue* possibleProcesses, int currentTime) {
    Queue* currentProcesses = queue_init();
    Node* current = possibleProcesses->front;
    while (current != NULL) {
        if (current->data.ts <= currentTime && currentTime <= current->data.tf) {
            enqueue(currentProcesses, current->data);
        }
        current = current->next;
    }
    return currentProcesses;
}

// Function to calculate the sum of priorities of current processes
int calculateSumPriorities(Queue* currentProcesses) {
    int sum = 0;
    Node* current = currentProcesses->front;
    while (current != NULL) {
        sum += current->data.prio;
        current = current->next;
    }
    return sum;
}

// Function to separate processes based on CPU capability
void separateProcesses(Queue* running, Queue* waiting, Queue* currentProcesses, int cpuCapability) {
    Node* current = currentProcesses->front;
    while (current != NULL) {
        if (current->data.prio <= cpuCapability) {
            enqueue(running, current);
        } else {
            enqueue(waiting, current->data);
        }
        current = current->next;
    }
}

// Function to update processes (increment idle time and delay termination time)
void updateProcesses(Queue* waiting, int currentTime) {
    Node* current = waiting->front;
    while (current != NULL) {
        if (current->data.ts < currentTime && currentTime <= current->data.tf) {
            current->data.idle++;
            current->data.tf++;
        }
        current = current->next;
    }
}


==================================================
File: C:/Users/murad/Programming/DSA_2/Project/saleh/scheduler.h
==================================================
// scheduler.h

#ifndef SCHEDULER_H
#define SCHEDULER_H

#include "queue.h"

// Function prototypes
void schedule(Queue* running, Queue* waiting, int time);
Queue* identifyPossibleProcesses(Queue* waiting, int currentTime);
Queue* selectCurrentProcesses(Queue* possibleProcesses, int currentTime);
int calculateSumPriorities(Queue* currentProcesses);
void separateProcesses(Queue* running, Queue* waiting, Queue* currentProcesses, int cpuCapability);
void updateProcesses(Queue* waiting, int currentTime);

#endif /* SCHEDULER_H */


==================================================
File: C:/Users/murad/Programming/DSA_2/Project/saleh/workload_item.c
==================================================
#include <stdio.h>
#include <stdlib.h>
#include "workload_item.h"

// Implement any functions related to workload_item here


==================================================
File: C:/Users/murad/Programming/DSA_2/Project/saleh/workload_item.h
==================================================
#ifndef WORKLOAD_ITEM_H
#define WORKLOAD_ITEM_H

#include <stddef.h>
struct workload_item_t {
    int pid;         //< the event id
    int ppid;        //< the event parent id
    size_t ts;       //< start date
    size_t tf;       //< finish date
    size_t idle;     //< total time the process has been idle;
    char *cmd;       //< the binary name
    int prio;        //< process priority
};

typedef struct workload_item_t workload_item;

#endif /* WORKLOAD_ITEM_H */


